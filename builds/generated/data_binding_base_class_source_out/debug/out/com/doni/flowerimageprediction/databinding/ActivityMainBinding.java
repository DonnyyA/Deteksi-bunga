// Generated by view binder compiler. Do not edit!
package com.doni.flowerimageprediction.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.camera.view.PreviewView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.doni.flowerimageprediction.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView captureImage;

  @NonNull
  public final ImageView galleryBtn;

  @NonNull
  public final ImageView history;

  @NonNull
  public final ConstraintLayout main;

  @NonNull
  public final PreviewView viewFinder;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView, @NonNull ImageView captureImage,
      @NonNull ImageView galleryBtn, @NonNull ImageView history, @NonNull ConstraintLayout main,
      @NonNull PreviewView viewFinder) {
    this.rootView = rootView;
    this.captureImage = captureImage;
    this.galleryBtn = galleryBtn;
    this.history = history;
    this.main = main;
    this.viewFinder = viewFinder;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.captureImage;
      ImageView captureImage = ViewBindings.findChildViewById(rootView, id);
      if (captureImage == null) {
        break missingId;
      }

      id = R.id.galleryBtn;
      ImageView galleryBtn = ViewBindings.findChildViewById(rootView, id);
      if (galleryBtn == null) {
        break missingId;
      }

      id = R.id.history;
      ImageView history = ViewBindings.findChildViewById(rootView, id);
      if (history == null) {
        break missingId;
      }

      ConstraintLayout main = (ConstraintLayout) rootView;

      id = R.id.viewFinder;
      PreviewView viewFinder = ViewBindings.findChildViewById(rootView, id);
      if (viewFinder == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, captureImage, galleryBtn, history,
          main, viewFinder);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
